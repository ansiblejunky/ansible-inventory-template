plugin: amazon.aws.aws_ec2

# Authentication options
# Environment variable AWS_ACCESS_KEY
#aws_access_key:
# Environment variable AWS_PROFILE
#aws_profile:
# Environment variable AWS_SECRET_KEY
#aws_secret_key:
# Environment variable AWS_SECURITY_TOKEN
#aws_security_token:

# Cache options
# Environment variable ANSIBLE_INVENTORY_CACHE
#cache: False
# Environment variable ANSIBLE_CACHE_PLUGIN_CONNECTION
#cache_connection:
# Environment variable ANSIBLE_CACHE_PLUGIN
#cache_plugin: memory
# Environment variable ANSIBLE_CACHE_PLUGIN_PREFIX
#cache_prefix: ansible_inventory_
# Environment variable ANSIBLE_CACHE_PLUGIN_TIMEOUT
#cache_timeout: 3600

regions:
  - us-east-2
  - us-east-1

compose:
  # Use 'public_ip_address' for demo purposes but 'private_ip_address' normally
  ansible_host: public_ip_address
  ec2_account_id: owner_id
  ec2_ami_launch_index: ami_launch_index | string
  ec2_architecture: architecture
  ec2_block_devices: dict(block_device_mappings | map(attribute='device_name') | list | zip(block_device_mappings | map(attribute='ebs.volume_id') | list))
  ec2_client_token: client_token
  ec2_dns_name: public_dns_name
  ec2_ebs_optimized: ebs_optimized
  ec2_eventsSet: events | default("")
  ec2_group_name: placement.group_name
  ec2_hypervisor: hypervisor
  ec2_id: instance_id
  ec2_image_id: image_id
  ec2_instance_profile: iam_instance_profile | default("")
  ec2_instance_type: instance_type
  ec2_ip_address: public_ip_address
  ec2_kernel: kernel_id | default("")
  ec2_key_name: key_name
  ec2_launch_time: launch_time | regex_replace(" ", "T") | regex_replace("(\+)(\d\d):(\d)(\d)$", ".\g<2>\g<3>Z")
  ec2_monitored: monitoring.state in ['enabled', 'pending']
  ec2_monitoring_state: monitoring.state
  ec2_persistent: persistent | default(false)
  ec2_placement: placement.availability_zone
  ec2_platform: platform | default("")
  ec2_private_dns_name: private_dns_name
  ec2_private_ip_address: private_ip_address
  ec2_public_dns_name: public_dns_name
  ec2_ramdisk: ramdisk_id | default("")
  ec2_reason: state_transition_reason
  ec2_region: placement.region
  ec2_requester_id: requester_id | default("")
  ec2_root_device_name: root_device_name
  ec2_root_device_type: root_device_type
  ec2_security_group_ids: security_groups | map(attribute='group_id') | list |  join(',')
  ec2_security_group_names: security_groups | map(attribute='group_name') | list |  join(',')
  ec2_sourceDestCheck: source_dest_check | default(false) | lower | string
  ec2_spot_instance_request_id: spot_instance_request_id | default("")
  ec2_state: state.name
  ec2_state_code: state.code
  ec2_state_reason: state_reason.message if state_reason is defined else ""
  ec2_subnet_id: subnet_id | default("")
  ec2_tag_Name: tags.Name
  ec2_virtualization_type: virtualization_type
  ec2_vpc_id: vpc_id | default("")

# Full list of filters are found documented here
# https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/describe-instances.html
filters:
  instance-state-name:
    - running
  tag:application: ansible

groups:
  ec2: true

hostnames:
  - tag:Name
  - network-interface.addresses.association.public-ip
  - dns-name
  - private-dns-name

# Keyed group name will become: [prefix] + [key] + [separator] + [value]
# key = reference instance key; you may use jinja filter functions against it as well
# parent_group = create the new group under this parent group
# prefix = prefix the group name with this string
# separator = characters/string to use to separate key/value pair
keyed_groups:
  - key: platform | default("linux") | regex_replace("[^A-Za-z0-9\_]", "_")
    parent_group: platforms
    prefix: platform
  - key: tags['companyname:tagname']
    prefix: tags_tagname_
    separator: ''
use_contrib_script_compatible_sanitization: true
